from flask import Flask, render_template, request, redirect, url_for, flash
from flask_login import LoginManager, login_user, login_required, logout_user, current_user, UserMixin
import sqlite3
import os
from werkzeug.security import generate_password_hash, check_password_hash
import re
from flask import request, flash, redirect, url_for


app = Flask(__name__)
app.secret_key = 'your_secret_key'  # –í–∞–∂–ª–∏–≤–æ –¥–ª—è —Å–µ—Å—ñ–π

DB = 'reservations.db'

login_manager = LoginManager()
login_manager.login_view = 'login'
login_manager.init_app(app)

class User(UserMixin):
    def __init__(self, id_, username, is_admin):
        self.id = id_
        self.username = username
        self.is_admin = is_admin

def get_user_by_id(user_id):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT id, username, is_admin FROM users WHERE id = ?", (user_id,))
    row = c.fetchone()
    conn.close()
    if row:
        return User(row[0], row[1], bool(row[2]))
    return None

def get_user_by_username(username):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT id, username, password, is_admin FROM users WHERE username = ?", (username,))
    row = c.fetchone()
    conn.close()
    if row:
        return {'id': row[0], 'username': row[1], 'password': row[2], 'is_admin': bool(row[3])}
    return None

def user_exists(username):
    return get_user_by_username(username) is not None

@login_manager.user_loader
def load_user(user_id):
    return get_user_by_id(user_id)

def init_db():
    db_exists = os.path.exists(DB)
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    if not db_exists:
        c.execute('''
            CREATE TABLE users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL,
                is_admin INTEGER NOT NULL DEFAULT 0
            )
        ''')
        c.execute('''
            CREATE TABLE reservations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date_from TEXT NOT NULL,
                date_to TEXT NOT NULL,
                rooms INTEGER NOT NULL,
                room_type TEXT NOT NULL,
                guests INTEGER NOT NULL,
                user_id INTEGER,
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        ''')

        admin_password = generate_password_hash("123")
        c.execute('INSERT INTO users (username, password, is_admin) VALUES (?, ?, ?)', ("admin", admin_password, 1))
    else:
        # –Ø–∫—â–æ —Ç–∞–±–ª–∏—Ü—ñ reviews –Ω–µ–º–∞—î ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ
        try:
            c.execute('SELECT 1 FROM reviews LIMIT 1')
        except sqlite3.OperationalError:
            c.execute('''
                CREATE TABLE reviews (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT NOT NULL,
    message TEXT NOT NULL,
    approved BOOLEAN DEFAULT 0
);
            ''')

    try:
        c.execute("ALTER TABLE reservations ADD COLUMN user_id INTEGER")
    except sqlite3.OperationalError:
        pass

    try:
        c.execute("ALTER TABLE reservations ADD COLUMN room_type TEXT NOT NULL DEFAULT '–î–≤–æ–º—ñ—Å–Ω–∞'")
    except sqlite3.OperationalError:
        pass

    try:
        c.execute("ALTER TABLE reviews ADD COLUMN approved INTEGER NOT NULL DEFAULT 0")
    except sqlite3.OperationalError:
        pass

    conn.commit()
    conn.close()

init_db()

@app.route('/')git add app.py
def index():
    return render_template('index.html')

@app.route('/menu')
def menu():
    return redirect(url_for('menu_category', category='hot'))

@app.route('/menu/<category>')
def menu_category(category):
    categories = {
        'hot': {
            'title': '–ì–∞—Ä—è—á—ñ —Å—Ç—Ä–∞–≤–∏',
            'dishes': [
                ('ü•£ –ë–æ—Ä—â —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∑—ñ —Å–º–µ—Ç–∞–Ω–æ—é', 120, 'images/1.jpg'),
                ('ü•ü –í–∞—Ä–µ–Ω–∏–∫–∏ –∑ –∫–∞—Ä—Ç–æ–ø–ª–µ—é —Ç–∞ –≥—Ä–∏–±–∞–º–∏', 110, 'images/2.jpg'),
                ('üç≤ –ö–æ—Ç–ª–µ—Ç–∞ –ø–æ-–∫–∏—ó–≤—Å—å–∫–∏', 180, 'images/3.jpg'),
                ('üçõ –ì–∞–ª—É—à–∫–∏ –∑ –º‚Äô—è—Å–æ–º', 130, 'images/4.jpg'),
                ('üçñ –ó–∞–ø–µ—á–µ–Ω–∞ —Å–≤–∏–Ω–∏–Ω–∞ –∑ –æ–≤–æ—á–∞–º–∏', 220, 'images/5.jpg'),
                ('ü•ó –û–≤–æ—á–µ–≤–∏–π –±–æ—Ä—â —ñ–∑ –¥–æ–º–∞—à–Ω—ñ–º —Ö–ª—ñ–±–æ–º', 115, 'images/6.jpg'),
                ('üçó –ö—É—Ä—è—á—ñ –∫—Ä–∏–ª—å—Ü—è –±–∞—Ä–±–µ–∫—é', 190, 'images/7.jpg'),
                ('ü•ò –†–∞–≥—É –∑ —è–ª–æ–≤–∏—á–∏–Ω–∏ —Ç–∞ –æ–≤–æ—á—ñ–≤', 250, 'images/8.jpg'),
            ]
        },
        'japanese': {
            'title': '–Ø–ø–æ–Ω—Å—å–∫–∞ –∫—É—Ö–Ω—è',
            'dishes': [
                ('üç£ –°—É—à—ñ-—Å–µ—Ç "–°—Ä—ñ–±–Ω–∏–π –ª–µ–≤"', 300, 'images/11.jpg'),
                ('üçú –†–∞–º–µ–Ω –∑ –∫—É—Ä–∫–æ—é', 200, 'images/12.jpg'),
                ('üç° –ú–æ—á—ñ –∑ –ø–æ–ª—É–Ω–∏—Ü–µ—é', 80, 'images/13.jpg'),
                ('üçµ –ó–µ–ª–µ–Ω–∏–π —á–∞–π –º–∞—Ç—á–∞', 90, 'images/14.jpg'),
                ('ü•¢ –¢–µ–º–ø—É—Ä–∞ –∑ –æ–≤–æ—á–∞–º–∏', 180, 'images/15.jpg'),
                ('üç§ –ï–±—ñ-—Ñ—Ä–∞–π (—Å–º–∞–∂–µ–Ω—ñ –∫—Ä–µ–≤–µ—Ç–∫–∏)', 220,'images/16.jpg'),
                ('üçô –û–Ω—ñ–≥—ñ—Ä—ñ –∑ –ª–æ—Å–æ—Å–µ–º', 130, 'images/17.jpg'),
                ('üç• –¢–∞–∫–æ—è–∫—ñ (–∫—É–ª—å–∫–∏ –∑ –≤–æ—Å—å–º–∏–Ω–æ–≥–∞)', 170, 'images/18.jpg'),
            ]
        },
        'drinks': {
            'title': '–ù–∞–ø–æ—ó',
            'dishes': [
                ('üçπ –°–≤—ñ–∂–æ–≤–∏–∂–∞—Ç–∏–π —Å—ñ–∫', 70, 'images/41.jpg'),
                ('üç∂ –¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–µ —Å–∞–∫–µ', 150, 'images/42.jpg'),
                ('‚òï –ö–∞–≤–∞ –∞–º–µ—Ä–∏–∫–∞–Ω–æ', 60, 'images/43.jpg'),
                ('üçµ –ó–µ–ª–µ–Ω–∏–π —á–∞–π –º–∞—Ç—á–∞', 90, 'images/14.jpg'),
                ('ü•§ –î–æ–º–∞—à–Ω—ñ–π –ª–∏–º–æ–Ω–∞–¥', 80, 'images/45.jpg'),
                ('üç∫ –ü–∏–≤–æ (—Å–≤—ñ—Ç–ª–µ/—Ç–µ–º–Ω–µ)', 90, 'images/46.jpg'),
                ('üç∑ –ß–µ—Ä–≤–æ–Ω–µ –≤–∏–Ω–æ', 180, 'images/47.jpg'),
                ('üç∏ –ö–æ–∫—Ç–µ–π–ª—å "–ú–æ—Ö—ñ—Ç–æ"', 220, 'images/48.jpg'),
            ]
        },
        'salads': {
            'title': '–°–∞–ª–∞—Ç–∏',
            'dishes': [
                ('ü•ó –°–∞–ª–∞—Ç "–¶–µ–∑–∞—Ä" –∑ –∫—É—Ä–∫–æ—é', 130, 'images/21.jpg'),
                ('ü•¨ –ì—Ä–µ—Ü—å–∫–∏–π —Å–∞–ª–∞—Ç', 110, 'images/22.jpg'),
                ('üåΩ –û–ª—ñ–≤‚Äô—î', 100, 'images/23.jpg'),
                ('ü•í –û–≤–æ—á–µ–≤–∏–π —Å–∞–ª–∞—Ç —ñ–∑ –æ–ª–∏–≤–∫–æ–≤–æ—é –æ–ª—ñ—î—é', 90, 'images/24.jpg'),
                ('ü•ë –ê–≤–æ–∫–∞–¥–æ –∑ —Ç–æ–º–∞—Ç–∞–º–∏', 140, 'images/25.jpg'),
                ('üçÖ –ö–∞–ø—Ä–µ–∑–µ –∑ –º–æ—Ü–∞—Ä–µ–ª–æ—é', 150, 'images/26.jpg'),
                ('üåø –°–∞–ª–∞—Ç –∑ —Ä—É–∫–æ–ª–æ—é —Ç–∞ –≥–æ—Ä—ñ—Ö–∞–º–∏', 160, 'images/27.jpg'),
                ('ü•ï –ú–æ—Ä–∫–≤—è–Ω–∏–π —Å–∞–ª–∞—Ç –∑ —Ä–æ–¥–∑–∏–Ω–∫–∞–º–∏', 95, 'images/28.jpg'),
            ]
        },
        'desserts': {
            'title': '–î–µ—Å–µ—Ä—Ç–∏',
            'dishes': [
                ('üç∞ –¢—ñ—Ä–∞–º—ñ—Å—É', 120, 'images/31.jpg'),
                ('üçÆ –î–µ—Å–µ—Ä—Ç "–ù–∞–ø–æ–ª–µ–æ–Ω"', 100, 'images/32.jpg'),
                ('üçì –ü–æ–ª—É–Ω–∏—Ü—è –∑—ñ –∑–±–∏—Ç–∏–º–∏ –≤–µ—Ä—à–∫–∞–º–∏', 90, 'images/33.jpg'),
                ('üç´ –®–æ–∫–æ–ª–∞–¥–Ω–∏–π –º—É—Å', 130, 'images/34.jpg'),
                ('üç™ –ü–µ—á–∏–≤–æ "–û—Ä–µ–æ"', 80, 'images/35.jpg'),
                ('üçß –ú–æ—Ö—ñ—Ç–æ —Å–æ—Ä–±–µ—Ç', 110, 'images/36.jpg'),
                ('üç® –í–∞–Ω—ñ–ª—å–Ω–µ –º–æ—Ä–æ–∑–∏–≤–æ', 95, 'images/37.jpg'),
                ('ü•ß –ß—ñ–∑–∫–µ–π–∫ –∑ —è–≥–æ–¥–∞–º–∏', 140, 'images/38.jpg'),
            ]
        }
        
    }

    if category not in categories:
        return render_template('404.html'), 404

    data = categories[category]
    return render_template('menu_category.html', title=data['title'], dishes=data['dishes'])

@app.route('/contacts', methods=['GET', 'POST'])
def contacts():
    conn = sqlite3.connect(DB)
    conn.row_factory = sqlite3.Row
    c = conn.cursor()

    if request.method == 'POST':
        if 'review' in request.form:
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É
            name = request.form['name']
            text = request.form['review']
            c.execute("INSERT INTO reviews (name, text, approved) VALUES (?, ?, 0)", (name, text))
            conn.commit()
            flash("–í—ñ–¥–≥—É–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.", "info")
            conn.close()
            return redirect(url_for('contacts'))

        elif 'review_id' in request.form:
            action = request.form.get('action')

            if action == 'approve':
                c.execute("UPDATE reviews SET approved = 1 WHERE id = ?", (request.form['review_id'],))
                conn.commit()
                flash("–í—ñ–¥–≥—É–∫ —Å—Ö–≤–∞–ª–µ–Ω–æ.", "success")

            elif action == 'delete':
                c.execute("DELETE FROM reviews WHERE id = ?", (request.form['review_id'],))
                conn.commit()
                flash("–í—ñ–¥–≥—É–∫ –≤–∏–¥–∞–ª–µ–Ω–æ.", "success")

            conn.close()
            return redirect(url_for('contacts'))

    # GET - –≤–∏–≤—ñ–¥ –≤—ñ–¥–≥—É–∫—ñ–≤
    c.execute("SELECT name, text FROM reviews WHERE approved = 1")
    approved_reviews = c.fetchall()

    unapproved_reviews = []
    if current_user.is_authenticated and current_user.is_admin:
        c.execute("SELECT id, name, text FROM reviews WHERE approved = 0")
        unapproved_reviews = c.fetchall()

    conn.close()

    return render_template('contacts.html', reviews=approved_reviews, pending_reviews=unapproved_reviews)

@app.route('/moderate_reviews', methods=['GET', 'POST'])
@login_required
def moderate_reviews():
    if not current_user.is_admin:
        flash("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", "danger")
        return redirect(url_for('index'))

    conn = sqlite3.connect(DB)
    conn.row_factory = sqlite3.Row
    c = conn.cursor()

    if request.method == 'POST':
        review_id = request.form['review_id']
        c.execute("UPDATE reviews SET approved = 1 WHERE id = ?", (review_id,))
        conn.commit()
        flash("–í—ñ–¥–≥—É–∫ —Å—Ö–≤–∞–ª–µ–Ω–æ.", "success")

    c.execute("SELECT id, name, text FROM reviews WHERE approved = 0")
    reviews = c.fetchall()
    conn.close()

    return render_template("moderate_reviews.html", reviews=reviews)

@app.route('/leave_review', methods=['GET', 'POST'])
@login_required
def leave_review():
    if request.method == 'POST':
        review_text = request.form.get('review_text')
        reservation_id = request.form.get('reservation_id')

        if review_text:
            conn = sqlite3.connect(DB)
            c = conn.cursor()
            c.execute("INSERT INTO reviews (username, text, approved) VALUES (?, ?, ?)",
                      (current_user.username, review_text, 0))
            conn.commit()
            conn.close()
            flash("–í–∞—à –≤—ñ–¥–≥—É–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é", "success")
            return redirect(url_for('my_bookings'))
        else:
            flash("–í—ñ–¥–≥—É–∫ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º", "danger")
    
    reservation_id = request.args.get('reservation_id')
    return render_template("leave_review.html", reservation_id=reservation_id)

@app.route('/reservation', methods=['GET', 'POST'])
@login_required
def reservation():
    if request.method == 'POST':
        date_from = request.form.get('date_from')
        date_to = request.form.get('date_to')
        rooms = request.form.get('rooms')
        room_type = request.form.get('room_type')
        guests = request.form.get('guests')

        conn = sqlite3.connect(DB)
        c = conn.cursor()
        c.execute('''
            INSERT INTO reservations (date_from, date_to, rooms, room_type, guests, user_id)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (date_from, date_to, rooms, room_type, guests, current_user.id))
        conn.commit()
        conn.close()

        flash('–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!', 'success')
        return redirect(url_for('index'))

    return render_template('reservation.html')
@app.route('/reservations_list')
@login_required
def reservations_list():
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute('''
        SELECT r.id, r.date_from, r.date_to, r.rooms, r.room_type, r.guests,
               u.username, u.phone, u.email
        FROM reservations r
        LEFT JOIN users u ON r.user_id = u.id
    ''')
    reservations = c.fetchall()
    conn.close()
    return render_template('reservations_list.html', reservations=reservations)

@app.route('/bookings')
@login_required
def bookings():
    if not current_user.is_admin:
        flash("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", "danger")
        return redirect(url_for('index'))

    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute('''
        SELECT r.id, r.date_from, r.date_to, r.rooms, r.room_type, r.guests,
               u.username, u.phone, u.email
        FROM reservations r
        JOIN users u ON r.user_id = u.id
        ORDER BY r.date_from DESC
    ''')
    reservations = c.fetchall()
    conn.close()
    return render_template('bookings.html', reservations=reservations)

@app.route('/my_bookings', methods=['GET', 'POST'])
@login_required
def my_bookings():
    conn = sqlite3.connect(DB)
    c = conn.cursor()

    if request.method == 'POST':
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω —ñ email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        phone = request.form.get('phone')
        email = request.form.get('email')

        c.execute('UPDATE users SET phone = ?, email = ? WHERE id = ?', (phone, email, current_user.id))
        conn.commit()
        flash("–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ", "success")

    # –í–∏–≤–æ–¥–∏–º–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ
    c.execute('''
        SELECT id, date_from, date_to, rooms, room_type, guests
        FROM reservations
        WHERE user_id = ?
        ORDER BY id DESC
    ''', (current_user.id,))
    reservations = c.fetchall()

    c.execute('SELECT phone, email FROM users WHERE id = ?', (current_user.id,))
    user_data = c.fetchone()
    conn.close()

    return render_template('my_bookings.html', reservations=reservations)
    

    phone = user_data[0] if user_data else None
    email = user_data[1] if user_data else None

    return render_template('my_bookings.html', reservations=reservations, phone=phone, email=email)


@app.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('index'))

    if request.method == 'POST':
        username = request.form['username']
        phone = request.form.get('phone')
        email = request.form.get('email')
        password = request.form['password']

        print(f"DEBUG: username={username}, phone={phone}, email={email}, password={password}")

        if user_exists(username):
            flash("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º –ª–æ–≥—ñ–Ω–æ–º –≤–∂–µ —ñ—Å–Ω—É—î", "error")
            return redirect(url_for('register'))

        if not username or not password:
            flash("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è.", "warning")
            return redirect(url_for('register'))

        hashed_pw = generate_password_hash(password)

        conn = sqlite3.connect(DB)
        c = conn.cursor()
        c.execute("INSERT INTO users (username, password, phone, email) VALUES (?, ?, ?, ?)", 
                  (username, hashed_pw, phone, email))
        conn.commit()
        conn.close()

        flash("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏.", "success")
        return redirect(url_for('login'))

    return render_template('auth.html', active_form='register')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('index'))

    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        user = get_user_by_username(username)
        if user and check_password_hash(user['password'], password):
            user_obj = User(user['id'], user['username'], user['is_admin'])
            login_user(user_obj)
            flash("–í—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ", "success")
            return redirect(url_for('index'))
        else:
            flash("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å", "danger")
            return redirect(url_for('login'))

    return render_template('auth.html', active_form='login')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash("–í–∏ –≤–∏–π—à–ª–∏ –∑ —Å–∏—Å—Ç–µ–º–∏", "info")
    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(debug=True)
@app.route('/check_users_table')
def check_users_table():
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("PRAGMA table_info(users);")
    columns = c.fetchall()
    conn.close()
    return f"<pre>{columns}</pre>"